generate hello:

no inputs 1 output : each interface will have a different VID so this takes VID as input parameter.

in the main click script for the VEIL switch, we need to have a generatehello element for each interface

send a hello packet every 20 secs. TBD : find optimal hello interval

have to use queues for the main Classifier element so we don't miss any packets. all nodes generating hello at the same time during simulation could cause loss of hello packets? introduce random delay? 

------------------------------------------------------------------------------
processhello:

insert/update VID (which is in the source MAC address field of the packet into the neighbour table). We also keep track of which interface the packet was received from. Since we will have one neighbor table per switch which in turn could have several interfaces, this is necessary. The routing element can then figure out which interface a pkt destined to one of our neighbors should go out thru. 
------------------------------------------------------------------------------
neighbortable:

The contents of this element will only be modified when a HELLO pkt is received by the processhello element or when an entry expires and needs to be purged from the table. Need to choose an appropriate duration for expiry.

if we made the 'neighbors' variable static, we'd be cramping design but this would be useful if we wanted to save space and pass only a pointer to vid in the Timer constructor call. We would not need the TimerData structure in that case.

reads and writes to all table data structures should be synchronized/made atomic.
------------------------------------------------------------------------------
cpVid:

to introduce a data type of our own, the following are the files and functions to look at:

confparse
element.cc    -- overloaded version of add_data_handlers. if we ever need read write handlers for elements that use VID, define some in this file
lib/error.cc  -- XXX_ptr_error_hook
		 static_initialize
------------------------------------------------------------------------------
hello pkt format:
ethernet header --- veil packet type (2B)

ARP pkt format:
ethernet header --- veil packet type (2B) --- ordinary ARP packet

publish access info pkt:
ethernet header --- veil packet type (2B) --- struct access_info

rdv publish:
ethernet header --- veil packet type (2B) --- VID
------------------------------------------------------------------------------
processarp :

Output of this element needs to go thru the routing element. Input for this element comes from the top level Classifier in the Click script.

Any packets that we receive that are of type ETHERTYPE_ARP SHOULD have come to us from one of the hosts connected to us directly. So we don't have to check if any of them were destined for us. There are 3 cases:

1. gratuitous ARP request/ reply
	we don't distinguish between the two types of packets and merely add an entry in VEILHostTable after generating a host vid. we also keep track of which interface of the switch is connected to other switches by duplicating the interface list and deleting the entries corresponding to the interfaces on which gratuitous ARPs were received.

2. the destination IP address belongs to one of the hosts connected to us
	we need not worry about ARP replies. if an arp request came from a host which was connected to the switch at the same interface as the destination host, we can ignore the packet. if the dest and src hosts are connected to the switch through different interfaces, then we send and ARP reply with the *host VID* of the destination.

3. next we check the packet type to see if it was ARP_REQUEST
	we only get to this stage if the packet is destined to some host not directly connected to us. we look up the mapping table to see if we can send an ARP reply ourselves. otherwise we construct a VEIL ARP request and set the destination to the access switch for that destination host's IP address. We also set a REROUTE annotation to indicate to RoutePacket that it needs to find the correct destination to send the packet to.

Next we check if packet type in the ethernet header is ETHERTYPE_VEIL. This means that it came from another switch. There are 2 cases:

1. packet is of type VEIL ARP request. 
	At this stage the packet might or might not be destined for us. Some other switch might have forwarded the packet to us because it thought we were the access switch. So we check if we have an entry corresponding to that request in our mapping or host table (if by some chance we are our own access switch). If found, send a VEIL ARP reply. If not found, we check if the packet was destined to *any* of the switch's interfaces. If yes, we ignore the packet else we set a REROUTE annotation.

2. packet is of type VEIL ARP reply.
	Check if the destination is one of the hosts in the host table. If yes, construct an ETHER ARP reply and send to host else send the packet to RoutePacket for forwarding to the correct destination. It's forward and not reroute because VEIL ARP replies are unicast so no need to set REROUTE.
------------------------------------------------------------------------------
publishaccessinfo:

There is a single instance of PublishAccessInfo per switch. src-vid  is the vid of the switch interface to which the host is connected i.e., first 4B of host-vid.  dst-vid is the access switch whose vid is calculated by hashing IPAddress of host. Since IP addresses and hence their hashes are unique, we publish each host's info to a different access switch.
------------------------------------------------------------------------------
buildroutetable:

We have to clear the route table to reconstruct it but if we did that, packets might get lost in the process. If we don't clear the table but overwrite entries as we are doing now, we might have to perform additional checks at each stage to ensure correctness. For eg, if we want to send a RDV_PUBLISH, we have to check that nexthop = our neighbor. Another solution is to implement live_reconfigure for the route table to avoid packet loss and additional checks while reconstructing.

Since there is one route table per interface and routing decisions are made after looking at all possibilities, it makes sense to associate neighbors with only the interfaces they are connected to in an effort to find as many routes as possible.
---------------------------------------------------------------------------------
routepacket:

ARP pkts or pkts destined to access switches apart from rendezvous request and publish pkts, might need rerouting. Such pkts are identified either using the REROUTE annotation or pkt type. During the process of finding a nexthop for such packets, we flip bits. If even after this process, we are unable to find a nexthop and k becomes 0,
we have to back route the packet to the Classifier and also set the destination mac address to the address of the interface so the 'process' elements know this packet was meant for us.





